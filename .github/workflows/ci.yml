name: Deploy Next.js to EC2

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: 10.5.1
          
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "pnpm"
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build Next.js application
        run: pnpm build
        
      - name: List build output
        run: |
          echo "Build completed. Contents:"
          ls -la
          echo "Next.js build folder:"
          ls -la .next/
        
      - name: Create deployment archive
        run: |
          tar -czf deployment.tar.gz .next/ package.json pnpm-lock.yaml next.config.js public/ 2>/dev/null || tar -czf deployment.tar.gz .next/ package.json pnpm-lock.yaml
          echo "Archive created successfully"
          
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            # Create application directory
            sudo mkdir -p /var/www/myapp
            sudo chown -R ec2-user:ec2-user /var/www/myapp
            cd /var/www/myapp
            
            # Stop existing application
            pm2 stop myapp || true
            pm2 delete myapp || true
            
            # Backup current deployment
            if [ -d ".next" ]; then
              cp -r .next .next_backup_$(date +%Y%m%d_%H%M%S) || true
            fi
            
            # Clean old files
            rm -rf .next/ node_modules/
            
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          source: "deployment.tar.gz"
          target: "/tmp/"
          
      - name: Extract and start application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            cd /var/www/myapp
            
            # Extract new files
            tar -xzf /tmp/deployment.tar.gz
            
            # Install production dependencies
            pnpm install --prod
            
            # Create ecosystem.config.js for PM2
            cat > ecosystem.config.js << 'EOF'
            module.exports = {
              apps: [{
                name: 'myapp',
                script: 'npm',
                args: 'start',
                cwd: '/var/www/myapp',
                env: {
                  NODE_ENV: 'production',
                  PORT: 3000
                },
                error_file: '/var/log/pm2/myapp-error.log',
                out_file: '/var/log/pm2/myapp-out.log',
                log_file: '/var/log/pm2/myapp.log'
              }]
            }
            EOF
            
            # Create log directory
            sudo mkdir -p /var/log/pm2
            sudo chown -R ec2-user:ec2-user /var/log/pm2
            
            # Start application with PM2
            pm2 start ecosystem.config.js
            pm2 save
            
            # Clean up
            rm /tmp/deployment.tar.gz
            
            echo "✅ Next.js deployment completed successfully!"
            echo "🚀 Application running on port 3000"
            
      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            sleep 10
            pm2 status myapp
            echo "Checking if app is responding..."
            curl -f http://localhost:3000 || echo "App not responding yet, check logs with: pm2 logs myapp"
            echo "🌐 App URL: http://ec2-35-162-98-50.us-west-2.compute.amazonaws.com:3000"